/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyInput {
        "clearable": boolean;
        "label": string;
        "message": string;
        "placeholder": string;
        "required": boolean;
        "size": 'sm' | 'lg' | 'me';
        "type": 'text' | 'number';
        "value": string;
    }
    interface MyItem {
        "label": string;
        "required": string;
    }
    interface MySlider {
        "max": string;
        "min": string;
        "showValue": boolean;
        "step": number;
        "value": string;
    }
    interface MyWeb {
    }
}
export interface MyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyCheckboxElement;
}
export interface MyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyInputElement;
}
export interface MySliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMySliderElement;
}
export interface MyWebCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyWebElement;
}
declare global {
    interface HTMLMyCheckboxElement extends Components.MyCheckbox, HTMLStencilElement {
    }
    var HTMLMyCheckboxElement: {
        prototype: HTMLMyCheckboxElement;
        new (): HTMLMyCheckboxElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLMyItemElement extends Components.MyItem, HTMLStencilElement {
    }
    var HTMLMyItemElement: {
        prototype: HTMLMyItemElement;
        new (): HTMLMyItemElement;
    };
    interface HTMLMySliderElement extends Components.MySlider, HTMLStencilElement {
    }
    var HTMLMySliderElement: {
        prototype: HTMLMySliderElement;
        new (): HTMLMySliderElement;
    };
    interface HTMLMyWebElement extends Components.MyWeb, HTMLStencilElement {
    }
    var HTMLMyWebElement: {
        prototype: HTMLMyWebElement;
        new (): HTMLMyWebElement;
    };
    interface HTMLElementTagNameMap {
        "my-checkbox": HTMLMyCheckboxElement;
        "my-component": HTMLMyComponentElement;
        "my-input": HTMLMyInputElement;
        "my-item": HTMLMyItemElement;
        "my-slider": HTMLMySliderElement;
        "my-web": HTMLMyWebElement;
    }
}
declare namespace LocalJSX {
    interface MyCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "onBlurEvent"?: (event: MyCheckboxCustomEvent<boolean>) => void;
        "onChangeEvent"?: (event: MyCheckboxCustomEvent<boolean>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyInput {
        "clearable"?: boolean;
        "label"?: string;
        "message"?: string;
        "onChangeEvent"?: (event: MyInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "size"?: 'sm' | 'lg' | 'me';
        "type"?: 'text' | 'number';
        "value"?: string;
    }
    interface MyItem {
        "label"?: string;
        "required"?: string;
    }
    interface MySlider {
        "max"?: string;
        "min"?: string;
        "onChangeEvent"?: (event: MySliderCustomEvent<string>) => void;
        "onMouseUpEvent"?: (event: MySliderCustomEvent<string>) => void;
        "showValue"?: boolean;
        "step"?: number;
        "value"?: string;
    }
    interface MyWeb {
        "onNameC"?: (event: MyWebCustomEvent<string>) => void;
        "onTagC"?: (event: MyWebCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "my-checkbox": MyCheckbox;
        "my-component": MyComponent;
        "my-input": MyInput;
        "my-item": MyItem;
        "my-slider": MySlider;
        "my-web": MyWeb;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-checkbox": LocalJSX.MyCheckbox & JSXBase.HTMLAttributes<HTMLMyCheckboxElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
            "my-item": LocalJSX.MyItem & JSXBase.HTMLAttributes<HTMLMyItemElement>;
            "my-slider": LocalJSX.MySlider & JSXBase.HTMLAttributes<HTMLMySliderElement>;
            "my-web": LocalJSX.MyWeb & JSXBase.HTMLAttributes<HTMLMyWebElement>;
        }
    }
}
